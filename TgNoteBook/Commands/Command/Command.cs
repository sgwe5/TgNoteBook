using System.Collections.Concurrent;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using TgNoteBook.DataLearn.Models;
using TgNoteBook.DataLearn.Repos;

namespace TgNoteBook.Commands.Command;

public class Command
{
    private static readonly ConcurrentDictionary<long, bool> _awaitingUserResponse = new ConcurrentDictionary<long, bool>();
    private static readonly ConcurrentDictionary<long, (string Title, string Text)> _userNotes = new ConcurrentDictionary<long, (string Title, string Text)>();
    private static readonly ConcurrentDictionary<long, bool> _awaitingNoteDeletion = new ConcurrentDictionary<long, bool>();
    private static NoteBookRepos _noteBookRepos;

    public static void Initialize(NoteBookRepos noteBookRepos)
    {
        _noteBookRepos = noteBookRepos;
    }

    public static async Task SlashStart(ITelegramBotClient botClient, Update update,
        CancellationToken cancellationToken)
    {
        var firstName = update.Message.From.FirstName;
        var startKeyboard = new ReplyKeyboardMarkup(
            new List<KeyboardButton[]>()
            {
                new KeyboardButton[]
                {
                    new KeyboardButton("–ß–µ–º –ø–æ–ª–µ–∑–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫?"),
                    new KeyboardButton("–ú–µ–Ω—é –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞"),
                }
            })
        {
            ResizeKeyboard = true,
        };
        await botClient.SendTextMessageAsync(
            chatId: update.Message.Chat.Id,
            $"–ü—Ä–∏–≤–µ—Ç, {firstName}! \ud83e\udd1a \n" +
            "–≠—Ç–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–ª–∞ –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –∏—Ö \u270f\ufe0f",
            replyMarkup: startKeyboard,
            cancellationToken: cancellationToken);
    }

    public static async Task NoteMenu(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        var menukeyboard = new ReplyKeyboardMarkup(
            new List<KeyboardButton[]>()
        {
            new KeyboardButton[]
            {
                new KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
                new KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏"),
            },
            new KeyboardButton[]
            {
                new KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏"),
                new KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
            }
        })
            {
                ResizeKeyboard = true,
            };
        await botClient.SendTextMessageAsync(
            chatId: update.Message.Chat.Id,
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
            replyMarkup: menukeyboard,
            cancellationToken: cancellationToken);
    }

    public static async Task AddNote(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;
        
        _awaitingUserResponse[chatId] = true;
        _userNotes[chatId] = (null, null);

        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å... \ud83d\udcdd"
                  + "–ù–∞–ø–∏—à–∏ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫",
            cancellationToken: cancellationToken);
    }

    public static async Task HandleMessage(ITelegramBotClient botClient, Update update,
        CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;
        if (_awaitingUserResponse.TryGetValue(chatId, out var isAwaiting) && isAwaiting)
        {
            if (_userNotes.TryGetValue(chatId, out var note))
            {
                if (note.Title == null)
                {
                    _userNotes[chatId] = (update.Message.Text, null);

                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.",
                        cancellationToken: cancellationToken);
                }
                else
                {
                    await _noteBookRepos.AddAsync(new NoteBookEntity
                    {
                        TgChatId = chatId,
                        Title = note.Title,
                        Text = update.Message.Text
                    });

                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚úÖ",
                        cancellationToken: cancellationToken);

                    _awaitingUserResponse[chatId] = false;
                    _userNotes.TryRemove(chatId, out _);
                }
            }
        }
        else if (_awaitingNoteDeletion.TryGetValue(chatId, out var isAwaitingDeletion) && isAwaitingDeletion)
        {
            var title = update.Message.Text;
            var note = await _noteBookRepos.GetNoteTitle(chatId, title);
            if (note != null)
            {
                await _noteBookRepos.DeleteTitleAsync(chatId, title);
    
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"–ó–∞–º–µ—Ç–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{title}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. üóëÔ∏è",
                    cancellationToken: cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"–ó–∞–º–µ—Ç–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ‚ùå",
                    cancellationToken: cancellationToken);
            }

            _awaitingNoteDeletion[chatId] = false;
        }
    }

    public static async Task GetNote(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;
        var notes = await _noteBookRepos.GetNotes(chatId);
        string messageText;
        
        if (notes.Any())
        {
            var notesMessage = notes.Select(note => $"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.Title} \n \n" + $"{note.Text} \n \n" + $"–°–æ–∑–¥–∞–Ω–æ –≤: {note.Created} \n");
            messageText = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n \n" + string.Join("\n", notesMessage); 
        }
        else
        {
            messageText = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫";
        }
        await botClient.SendTextMessageAsync(
            chatId: update.Message.Chat.Id,
            text: messageText,
            cancellationToken: cancellationToken
        );
    }

    public static async Task NoteFaq(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;
        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –Ω—É–∂–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏ –∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü. –° –µ–≥–æ –ø–æ–º–æ—â—å—é –ª–µ–≥—á–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –∏–∑–±–µ–≥–∞—Ç—å –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏. –ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤–∏–¥–∏—à—å, –∫–∞–∫ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
            cancellationToken: cancellationToken);
    }
    
    public static async Task DeleteOneNote(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;

        _awaitingNoteDeletion[chatId] = true;

        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            cancellationToken: cancellationToken);
    }

    public static async Task DeleteAllNote(ITelegramBotClient botClient, Update update,
        CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;

        var deletekeyboard = new ReplyKeyboardMarkup(
            new List<KeyboardButton[]>()
            {
                new KeyboardButton[]
                {
                    new KeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å"),
                    new KeyboardButton("–ù–ï–ï–ï–ï–ï–ï–¢ \ud83d\ude2d"),
                },
                new KeyboardButton[]
                {
                    new KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ")
                }
            })
        {
            ResizeKeyboard = true,
        };
        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: "–¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—Å—ë —É–¥–∞–ª–∏—Ç—å?",
            replyMarkup: deletekeyboard,
            cancellationToken: cancellationToken);
    }

    public static async Task MessageByDelete(ITelegramBotClient botClient, Update update,
        CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;

        var note = await _noteBookRepos.GetNotes(chatId);
        if (note.Count != 0)
        {
            await _noteBookRepos.DeleteAllAsync(chatId);
            
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "–ó–∞–º–µ—Ç–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. üóëÔ∏è",
                cancellationToken: cancellationToken);
        }
        else
        {
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå",
                cancellationToken: cancellationToken);
        }
    }
}